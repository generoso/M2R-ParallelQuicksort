# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages
#+TITLE:       Laboratory Notebook for a Multi-Threaded Version of Quicksort
#+AUTHOR:      Generoso Pagano, Arnaud Legrand
#+LANGUAGE:    en
#+TAGS: ARNAUD(a) REPRODUCED(r)

* Intro
This document is based on Arnaud Legrand's journal.org. I stole it and
modified it to conduct a simple performance evaluation of a parallel
implementation of QuickSort, and to play with org mode. In the
[[Experimental%20Reports][Experimental Reports]] section, the tag =ARNAUD= is used to identify
Arnaud's experiments. Among Arnaud's analyses, I tagged with
=REPRODUCED= the analyses I re-executed on my machine.
* Project Overview
This project aims at providing an efficient multi-threaded
implementation of the QuickSort algorithm on multi-core machines. This
document contains some attempts to evaluate the performance of an
implementation of such code.
* General Organization
** src/
This directory comprises the parallel implementation and a standard
Makefile to compile it.
** data/
This is where raw experimental data should go. Each directory entry
comprises a set of experiments and the directory name is based on the
machine name and on the date. For example:
#+begin_src sh :results output :exports both 
echo mkdir data/`hostname`_`date +%F`
#+end_src

#+RESULTS:
: mkdir data/jklaptop_2014-10-24

* Typical usage
** Compilation
A simple makefile with various compilation options is provided in the
src/ directory. Compilation is thus done by running the following command:
#+begin_src sh :results output 
make -C src/
#+end_src

#+RESULTS:
: make: Entering directory '/home/generoso/Dropbox/work/R_course/M2R-ParallelQuicksort/src'
: cc   -g -Wall -Wshadow -Wcast-align -Waggregate-return -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wpointer-arith -Wwrite-strings -finline-functions -O0 -pthread -lrt -std=c99  -c -o parallelQuicksort.o parallelQuicksort.c
: cc   -g -Wall -Wshadow -Wcast-align -Waggregate-return -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wpointer-arith -Wwrite-strings -finline-functions -O0 -pthread -lrt -std=c99  parallelQuicksort.o  -o parallelQuicksort 
: make: Leaving directory '/home/generoso/Dropbox/work/R_course/M2R-ParallelQuicksort/src'

Of course, you can clean up everything with:
#+begin_src sh :results output 
make clean -C src/
#+end_src

#+RESULTS:
: make: Entering directory '/home/generoso/Dropbox/work/R_course/M2R-ParallelQuicksort/src'
: rm -f parallelQuicksort *.o *~
: make: Leaving directory '/home/generoso/Dropbox/work/R_course/M2R-ParallelQuicksort/src'

** Running the code
The code is quite simple at the moment and can be run in the following way:
#+begin_src
./src/parallelQuicksort [1000000]
#+end_src
When run, the code executes initializes an array of the size given in
argument (1000000 by default) with random integer values and sorts it
using:
1. a custom sequential implementation;
2. a custom parallel implementation;
3. the libc qsort function.
Times are reported in seconds.

* Experimental Reports
** 2014-10-13                                                       :ARNAUD:
*** Initial code design
- I obtained an initial implementation from
  http://sc12.supercomputing.org/hpceducator/PythonForParallelism/codes/parallelQuicksort.c.
  According to the header, the original author is Joshua Stough from
  Washington and Lee University. I hope he will not mind that I reuse
  this piece of code for educational purposes.
- Here is a typical first execution on my laptop (an Intel(R) Core(TM)
  i7 running a Debian with Linux 3.14.15):
  #+begin_src sh :results output :exports both 
    ./src/quicksort
  #+end_src

  #+RESULTS:

  Sweet, in my first attempt, it looks like this parallel version is
  indeed running faster than then sequential one. I have to say this
  warning message is stressing me a bit though.
- On smaller instances, the code would segfault. So I reindented the
  code and thanks to valgrind and gdb, I could find what was wrong. I
  also renamed the file so that compiling is more convenient. This
  fixed the previous warning message so now everything seems fine:
  #+begin_src sh :results output :exports both 
    ./src/parallelQuicksort
  #+end_src

  #+RESULTS:
  : Sequential quicksort took: 0.239347 sec.
  : Parallel quicksort took: 0.176365 sec.
  : Built-in quicksort took: 0.244716 sec.

*** First series of experiments
Let's try to see how the three algorithms behave when changing the 
array size. Since one measurement is not enough, I run the code 5
times in a row.
#+begin_src sh foo :results output :exports both :tangle scripts/run_benchmarking.sh
  OUTPUT_DIRECTORY=data/`hostname`_`date +%F`
  mkdir -p $OUTPUT_DIRECTORY
  OUTPUT_FILE=$OUTPUT_DIRECTORY/measurements_`date +%R`.txt

  touch $OUTPUT_FILE
  for i in 100 1000 10000 100000 1000000; do
      for rep in `seq 1 5`; do
          echo "Size: $i" >> $OUTPUT_FILE;
          ./src/parallelQuicksort $i >> $OUTPUT_FILE;
      done ;
  done
#+end_src
I obtained the following [[file:data/sama_2014-10-13/measurements_03:47.txt][output]].

*** A simple plot with R                                       :REPRODUCED:
Here is a simple script to parse the results:
#+begin_src perl :results output raw :exports both :tangle scripts/csv_quicksort_extractor.pl
  use strict;

  my($line);
  my($size);

  print "Size, Type, Time\n" ;
  while($line=<>) {
      chomp $line;
      if($line =~/^Size: ([\d\.]*)$/) {
          $size = $1;
          next;
      } 
      if($line =~/^(.*) quicksort.*: ([\d\.]*) sec.$/) {
          print "$size, \"$1\", $2\n" ;
          next;
      } 
  }
#+end_src

I can then simply parse my data with the following command:

#+begin_src sh :results output :exports both 
perl scripts/csv_quicksort_extractor.pl < data/sama_2014-10-13/measurements_03\:47.txt > data/sama_2014-10-13/measurements_03\:47.csv
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file data/sama_2014-10-13/measurements_03:47.png :exports both :width 600 :height 400 :session
  df <- read.csv("data/sama_2014-10-13/measurements_03:47.csv",header=T)
  plot(df$Size,df$Time,col=c("red","blue","green")[df$Type])
#+end_src

#+RESULTS:
[[file:data/sama_2014-10-13/measurements_03:47.png]]

Well, this is not particularly nice and some may not know/like R.
*** A simple plot with gnuplot                                 :REPRODUCED:
So let's try to parse in an other way and use gnuplot:

#+begin_src perl :results output raw :exports both :tangle scripts/csv_quicksort_extractor2.pl
  use strict;

  my($line);
  my($size);
  my($seq,$par,$libc);
  print "Size, Seq, Par, Libc\n" ;
  while($line=<>) {
      chomp $line;
      if($line =~/^Size: ([\d\.]*)$/) {
          $size = $1;
          next;
      } 
      if($line =~/^Sequential quicksort.*: ([\d\.]*) sec.$/) {
          $seq=$1; next;
      } 
      if($line =~/^Parallel quicksort.*: ([\d\.]*) sec.$/) {
          $par=$1; next;
      } 
      if($line =~/^Built-in quicksort.*: ([\d\.]*) sec.$/) {
          $libc=$1; 
          print "$size, $seq, $pqr, $libc\n";
          next;
      }
  }
#+end_src

#+begin_src sh :results output raw :exports both 
  FILENAME="data/sama_2014-10-13/measurements_03:47"
  perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
  echo "
    set terminal png size 600,400 
    set output '${FILENAME}_wide.png'
    set datafile separator ','
    set key autotitle columnhead
    plot '${FILENAME}_wide.csv' using 1:2 with linespoints, '' using 1:3 with linespoints, '' using 1:4 with linespoints
  " | gnuplot
  echo [[file:${FILENAME}_wide.png]]
#+end_src

#+RESULTS:
[[file:data/sama_2014-10-13/measurements_03:47_wide.png]]

Well, I'm not sure it is nicer but I have lines. A first crude
analysis seems to reveal the the parallel version is worth it for
arrays larger than 400000.
** 2014-10-25
*** Environment Setup
To play with org mode and easily reproduce Arnaud's analyses, I had to:
- Set-up emacs with a convenient configuration file (I based my configuration file on [[http://mescal.imag.fr/membres/arnaud.legrand/misc/init.org][the one]] on Arnaud's website).
- Install ess (and R, which is a dependency); on my Debian 3.16.3-2 I
  did this with the following command:
  #+BEGIN_SRC 
  sudo apt-get install ess 
  #+END_SRC
  After installing ess, I just added the following line to my emacs
  init file:
  #+begin_src emacs-lisp
  (require 'ess-site)
  #+end_src
*** Experimental environment (my personal machine)
- Operating System details
#+begin_src sh :results output :exports results
uname -a
#+end_src

#+RESULTS:
: Linux jklaptop 3.16-2-amd64 #1 SMP Debian 3.16.3-2 (2014-09-20) x86_64 GNU/Linux
- Hw information
#+begin_src sh :results output :exports results
echo "Number of CPUs: "`cat /proc/cpuinfo | grep "model name" | wc -l`
echo "CPU information (all cpus are equal):"
echo "- " `cat /proc/cpuinfo | grep "model name" | tail -n 1`
echo "- " `cat /proc/cpuinfo | grep "cache size" | tail -n 1`
echo "Scaling governor: "`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`
echo "RAM: "`cat /proc/meminfo | grep "MemTotal" | awk '{print $2 " " $3}'` 
#+end_src

#+RESULTS:
: Number of CPUs: 4
: CPU information (all cpus are equal):
: -  model name : Intel(R) Core(TM) i7-2640M CPU @ 2.80GHz
: -  cache size : 4096 KB
: Scaling governor: performance
: RAM: 6040504 kB

*** First series of experiment
I run my first series of experiments varying the array size and
running 30 repetition for each size.

#+begin_src sh :exports both :tangle scripts/bench_1.sh
  OUTPUT_DIRECTORY=data/`hostname`_`date +%F`
  mkdir -p $OUTPUT_DIRECTORY
  OUTPUT_FILE=$OUTPUT_DIRECTORY/measurements_`date +%R`.txt

  touch $OUTPUT_FILE
  for i in 100 1000 10000 100000 1000000; do
      for rep in `seq 1 30`; do
          echo "Size: $i" >> $OUTPUT_FILE;
          ./src/parallelQuicksort $i >> $OUTPUT_FILE;
      done ;
  done
  echo "finish"
#+end_src

#+RESULTS:
: finish

I obtained the following [[file:data/jklaptop_2014-10-25/measurements_21:13.txt][output]]. 
*** Analysis with R
I reuse Arnaud's perl script to parse the output into a csv format
that is easily readable using R.

#+begin_src sh :results output :exports both 
  FILENAME="data/jklaptop_2014-10-25/measurements_21:13"
  perl scripts/csv_quicksort_extractor.pl < "$FILENAME.txt" > "$FILENAME.csv"
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file data/jklaptop_2014-10-25/measurements_21:13.png :exports both :width 600 :height 400 :session
  df <- read.csv("data/jklaptop_2014-10-25/measurements_21:13.csv",header=T)
  plot(df$Size,df$Time,col=c("red","blue","green")[df$Type])
#+end_src

#+RESULTS:
[[file:data/jklaptop_2014-10-25/measurements_21:13.png]]
*** Analysis with Gnuplot
As above, I reuse Arnaud's scripts to parse the output into a format
easily readable with gnuplot.

#+begin_src sh :results output raw :exports both 
  FILENAME="data/jklaptop_2014-10-25/measurements_21:13"
  perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
  echo "
    set terminal png size 600,400 
    set output '${FILENAME}_wide.png'
    set datafile separator ','
    set key autotitle columnhead
    plot '${FILENAME}_wide.csv' using 1:2 with linespoints, '' using 1:3 with linespoints, '' using 1:4 with linespoints
  " | gnuplot
  echo [[file:${FILENAME}_wide.png]]
#+end_src

#+RESULTS:
[[file:data/jklaptop_2014-10-25/measurements_21:13_wide.png]]

#+RESULTS:
* Todo
- [ ] redo R plot with lines, confidence intervals, legend
- [ ] redo gnuplot with legend and yerrorlines
